Index: ex2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nAuthor: Leon Orou\r\nMatr.Nr.: k12125027\r\nExercise 2\r\n\"\"\"\r\n\r\n\r\nimport os\r\n\r\nimport PIL\r\nfrom PIL import Image, ImageStat\r\nimport numpy as np\r\nimport glob\r\nimport hashlib\r\nfrom tqdm import tqdm\r\nfrom pathlib import Path\r\nimport re\r\nimport shutil\r\n\r\n\r\ndef validate_images(input_dir, output_dir, log_file, formatter):\r\n    files = sorted(glob.glob(os.path.join(input_dir, \"**\", \"*.jpg\"), recursive=True))\r\n    hashes = []  # used for all hash to compare values if already exists afterwards\r\n    if not os.path.exists(os.path.abspath(output_dir)):\r\n        os.mkdir(os.path.abspath(output_dir))\r\n    if not os.path.exists(os.path.abspath(log_file)):\r\n        os.mkdir(os.path.abspath(log_file))\r\n\r\n    for i, image_file in tqdm(enumerate(files), desc=\"Processing files\", total=len(files)):\r\n        file_ending = re.findall(\"[.]\\w+\", files[i])[0]\r\n        file_code = \"{number:06}\".format(number=i) + file_ending\r\n        if files[i].lower().endswith(('.jpg', '.jpeg')):\r\n            file_size = os.path.getsize(os.path.abspath(files[i]))\r\n            if file_size <= 250000:\r\n                # with np.array(Image.open(image_file)) as img:\r\n                with PIL.Image.open(image_file) as img:\r\n                    try:\r\n                        img.verify()\r\n                        width, height = img.size\r\n                        channels = img.mode\r\n                        if width*height >= 96 and channels == \"RGB\":\r\n                            image = np.array(Image.open(image_file))\r\n                            var_channels = image.var(axis=(0, 1))\r\n                            if np.prod(var_channels) > 0:  # if no element is 0 (mul of elems)\r\n                                hash_function = hashlib.sha256()\r\n                                # some_data = bytes(img, encoding=\"utf-8\")\r\n                                # hash_function.update(some_data)\r\n                                hash_value = hash_function.digest()\r\n                                if hash_value not in hashes:\r\n                                    hashes.append(hash_value)\r\n                                    shutil.copy(image_file, output_dir)\r\n                                    # output_file = open(\"/output_dir/output_file.txt\", \"w+\")\r\n                                    # output_file.write(file_code + \"\\n\")\r\n                                else:\r\n                                    error_code = \"The image was already added\"\r\n                                    write_log(file_code, error_code, input_dir)\r\n                            else:\r\n                                error_code = \"At least one channel of the image always the same value\"\r\n                                write_log(file_code, error_code, input_dir)\r\n                        else:\r\n                            error_code = \"image is smaller than 96 pixels or doesn't have the right RGB channels\"\r\n                            write_log(file_code, error_code, input_dir)\r\n                    except Exception:\r\n                        error_code = \"Image could not be read\"\r\n                        write_log(file_code, error_code, input_dir)\r\n            else:\r\n                error_code = \"image is larger than 250 kbit\"\r\n                write_log(file_code, error_code, input_dir)\r\n        else:\r\n            error_code = \"image doesn't end with '.jpg', '.jpeg', '.JPG' or '.JPEG'\"\r\n            write_log(file_code, error_code, input_dir)\r\n\r\n\r\ndef write_log(file_code, error_code, input_dir):\r\n    log_file = open(f\"{input_dir}/log_file.txt\", \"a\")\r\n    log_file.write(file_code + \";\" + error_code + \"\\n\")\r\n\r\n\r\n# path = r'.\\unittest\\unittest_input_0'\r\n# output = validate_images(path, 'output_dir', 'log_dir')\r\n# print(output)\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ex2.py b/ex2.py
--- a/ex2.py	(revision 94afad3c25e413844780548937351cbeb944648e)
+++ b/ex2.py	(date 1651086885434)
@@ -16,68 +16,109 @@
 from pathlib import Path
 import re
 import shutil
+import logging
+from os import listdir
 
 
 def validate_images(input_dir, output_dir, log_file, formatter):
-    files = sorted(glob.glob(os.path.join(input_dir, "**", "*.jpg"), recursive=True))
+    file_count = 0
+    files = []
+    #files = sorted(glob.glob(os.path.join(os.path.abspath(input_dir), "**", "*"), recursive=True))
+    for path in Path(input_dir).rglob('*.*'):
+        files.append(str(path))
+    files.sort()
     hashes = []  # used for all hash to compare values if already exists afterwards
-    if not os.path.exists(os.path.abspath(output_dir)):
-        os.mkdir(os.path.abspath(output_dir))
-    if not os.path.exists(os.path.abspath(log_file)):
-        os.mkdir(os.path.abspath(log_file))
+    if os.path.exists(os.path.abspath(output_dir)):
+        output_path = os.path.abspath(output_dir)
+        shutil.rmtree(output_path)
+        os.makedirs(output_path)
+    else:
+        output_path = os.path.abspath(output_dir)
+        os.makedirs(output_path)
+    open(f"{os.path.abspath(log_file)}", 'w').close()
+    logging.basicConfig(filename=log_file, filemode='w')
 
     for i, image_file in tqdm(enumerate(files), desc="Processing files", total=len(files)):
-        file_ending = re.findall("[.]\w+", files[i])[0]
-        file_code = "{number:06}".format(number=i) + file_ending
+        file_ending = re.search("[.]\w+", files[i]).group()
+        rel_file_path = image_file.replace(input_dir+"\\", "")
+        if formatter == "06d":
+            file_code = "{number:06}".format(number=file_count) + file_ending
+        else:
+            file_code = str(file_count) + str(file_ending)
         if files[i].lower().endswith(('.jpg', '.jpeg')):
             file_size = os.path.getsize(os.path.abspath(files[i]))
             if file_size <= 250000:
-                # with np.array(Image.open(image_file)) as img:
-                with PIL.Image.open(image_file) as img:
-                    try:
-                        img.verify()
-                        width, height = img.size
-                        channels = img.mode
-                        if width*height >= 96 and channels == "RGB":
-                            image = np.array(Image.open(image_file))
-                            var_channels = image.var(axis=(0, 1))
-                            if np.prod(var_channels) > 0:  # if no element is 0 (mul of elems)
-                                hash_function = hashlib.sha256()
-                                # some_data = bytes(img, encoding="utf-8")
-                                # hash_function.update(some_data)
-                                hash_value = hash_function.digest()
-                                if hash_value not in hashes:
-                                    hashes.append(hash_value)
-                                    shutil.copy(image_file, output_dir)
-                                    # output_file = open("/output_dir/output_file.txt", "w+")
-                                    # output_file.write(file_code + "\n")
-                                else:
-                                    error_code = "The image was already added"
-                                    write_log(file_code, error_code, input_dir)
-                            else:
-                                error_code = "At least one channel of the image always the same value"
-                                write_log(file_code, error_code, input_dir)
-                        else:
-                            error_code = "image is smaller than 96 pixels or doesn't have the right RGB channels"
-                            write_log(file_code, error_code, input_dir)
-                    except Exception:
-                        error_code = "Image could not be read"
-                        write_log(file_code, error_code, input_dir)
+                try:
+                    with PIL.Image.open(image_file) as img:
+                        try:
+                            img.verify()
+                            width, height = img.size
+                            channels = img.mode
+                            if width >= 96 and height >= 96 and channels == "RGB":
+                                image = np.array(Image.open(image_file))
+                                var_channels = image.var(axis=(0, 1))
+                                if np.prod(var_channels) > 0:  # if no element is 0 (mul of elems)
+                                    hash_function = hashlib.sha256()
+                                    hash_function.update(image)
+                                    # some_data = bytes(img, encoding="utf-8")
+                                    # hash_function.update(some_data)
+                                    hash_value = hash_function.digest()
+                                    if hash_value not in hashes:
+                                        hashes.append(hash_value)
+                                        #shutil.copy(file_code, output_path)
+                                        #file_code = "{number:06}".format(number=file_count) + file_ending
+                                        shutil.copy(image_file, output_path)
+                                        pre, ext = os.path.splitext(file_code)
+                                        file_name = os.path.basename(os.path.normpath(image_file))
+                                        #file_name = re.search(r"[\\](.+)", image_file).group(-1)
+                                        old_name = os.path.abspath(output_path) + "\\" + file_name
+                                        new_name = str(os.path.abspath(output_path) + "\\" + pre + ".jpg")
+                                        os.rename(old_name, new_name)
+                                        file_count += 1
+                                    else:
+                                        error_code = "6"
+                                        write_log(rel_file_path, error_code, log_file)
+                                        continue
+                                else:
+                                    error_code = "5"
+                                    write_log(rel_file_path, error_code, log_file)
+                                    continue
+                            else:
+                                error_code = "4"
+                                write_log(rel_file_path, error_code, log_file)
+                                continue
+                        except Exception as e:
+                            error_code = f"3"
+                            write_log(rel_file_path, error_code, log_file)
+                            continue
+                except Exception as e:
+                    error_code = f"3"
+                    write_log(rel_file_path, error_code, log_file)
+                    continue
             else:
-                error_code = "image is larger than 250 kbit"
-                write_log(file_code, error_code, input_dir)
+                error_code = "2"
+                write_log(rel_file_path, error_code, log_file)
+                continue
         else:
-            error_code = "image doesn't end with '.jpg', '.jpeg', '.JPG' or '.JPEG'"
-            write_log(file_code, error_code, input_dir)
+            error_code = "1"
+            write_log(rel_file_path, error_code, log_file)
+            continue
+    return file_count
 
 
-def write_log(file_code, error_code, input_dir):
-    log_file = open(f"{input_dir}/log_file.txt", "a")
-    log_file.write(file_code + ";" + error_code + "\n")
+def write_log(rel_file_path, error_code, log_file):
+    if log_file.endswith(".log"):
+        log_file = open(f"{os.path.abspath(log_file)}", "a")
+        log_file.write(rel_file_path + ";" + error_code + "\n")
+    else:
+        log_file = open(f"{os.path.abspath(log_file)}", "a")
+        log_file.write(rel_file_path + ";" + error_code + "\n")
 
 
-# path = r'.\unittest\unittest_input_0'
-# output = validate_images(path, 'output_dir', 'log_dir')
+# input_dir = 'unittest\\unittest_input_1'
+# log_file = 'unittest\\outputs\\unittest_input_1.log'
+# output_dir = 'unittest\\outputs\\unittest_input_1'
+# output = validate_images(input_dir, output_dir, log_file, formatter="06d")
 # print(output)
-
-
+#
+#
Index: unittest/outputs/unittest_input_9.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittest/outputs/unittest_input_9.log b/unittest/outputs/unittest_input_9.log
new file mode 100644
--- /dev/null	(date 1651086274452)
+++ b/unittest/outputs/unittest_input_9.log	(date 1651086274452)
@@ -0,0 +1,7 @@
+actually_text_file.jpg;3
+file_size_too_big.jpg;2
+grayscale.jpg;4
+h_and_w_too_small.jpg;4
+not_jpg.webp;1
+only_orange.jpg;5
+same2.jpg;6
Index: unittest/outputs/unittest_input_3.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittest/outputs/unittest_input_3.log b/unittest/outputs/unittest_input_3.log
new file mode 100644
--- /dev/null	(date 1651086274192)
+++ b/unittest/outputs/unittest_input_3.log	(date 1651086274192)
@@ -0,0 +1,2 @@
+also_not_jpg.webp;1
+not_jpg.webp;1
Index: ex2_anna.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ex2_anna.py b/ex2_anna.py
new file mode 100644
--- /dev/null	(date 1651079412066)
+++ b/ex2_anna.py	(date 1651079412066)
@@ -0,0 +1,94 @@
+"""
+Author: Leon Orou
+Matr.Nr.: k12125027
+Exercise 2
+"""
+
+
+import shutil
+import os
+from os import listdir
+from pathlib import Path
+from PIL import Image, ImageStat
+import hashlib
+import logging
+
+
+class Validator:
+
+    def _init_(self):
+        print("Hello how is it going")
+
+    def validate_images(self, input_dir, output_dir, log_file, format_string="06d"):
+
+        # check if out_put output_dir & log_file exist else create them
+        if not os.path.exists(output_dir):
+            os.mkdir(output_dir)
+
+        if not os.path.exists(log_file[:log_file.rfind("/")]):
+            os.mkdir(log_file[:log_file.rfind("/")])
+
+        logging.basicConfig(filename=log_file, filemode='w')
+        images = listdir(input_dir)
+        image_number = 0
+        for image in images:
+            if image.endswith(".jpg") or image.endswith(".JPG") or image.endswith(".jpeg") or image.endswith(".JPEG"):
+                image_path = input_dir + "/" + image
+                image_size = Path(image_path).stat().st_size  # image for reading the size
+                if image_size <= 250000:
+                    validate_response = self.validate_image_metadata(image_path)
+                    self.copy_image(image_path, output_dir, str(image_number))
+                    image_number += 1
+                else:
+                    logging.warning(image + ";2")
+            else:
+                logging.warning(image + ";1")
+        return image_number
+
+    def validate_image_metadata(self, image_path):
+        try:
+            image_info = Image.open(image_path)
+            print(
+                image_path + ": " + image_info.mode + " - h: " + str(image_info.height) + " - w: " + str(image_info.width))
+            hw3_stat = image_info.mode == "RGB" and image_info.height >= 96 and image_info.width >= 96
+            if hw3_stat._eq_(False):
+                logging.warning(image_path[image_path.rfind("/")+1:] + ";4")
+            variance_stat = self.validate_variance(image_info)
+            if variance_stat._eq_(False):
+                logging.warning(image_path[image_path.rfind("/")+1:] + ";5")
+            return hw3_stat and variance_stat  # conditions which should be met
+        except:
+            logging.warning(image_path[image_path.rfind("/")+1:] + ";3")
+
+
+    def validate_variance(self, image_info):
+        variance_stat = ImageStat.Stat(image_info).var
+        for color in variance_stat:
+            if color <= 0:
+                print("Das ist schlecht!")
+                return False
+        else:
+            print("Das ist schoen!")
+            return True
+
+    def copy_image(self, image_path, output_dir, image_number):
+        if self.is_already_copied(image_path, output_dir):
+            print("This file is already copied")
+            logging.warning(image_path[image_path.rfind("/")+1:] + ";6")
+        else:
+            shutil.copy(image_path, output_dir + "/" + image_number + ".jpg")
+
+    def get_file_checksum(self, file_name):
+        return hashlib.md5(open(file_name, 'rb').read()).hexdigest()
+
+    def is_already_copied(self, image_path, output_dir):
+        for image in listdir(output_dir):
+            if self.get_file_checksum(output_dir + "/" + image) == self.get_file_checksum(image_path):
+                return True
+        return False
+
+
+# image_count=Validator().validate_images("/Users/annastrohbach/Desktop/JKU /assignments/k12111352",
+#                             "/Users/annastrohbach/Desktop/JKU /assignments/output2",
+#                             "/Users/annastrohbach/Desktop/JKU /assignments22/output.log")
+# print(image_count)
\ No newline at end of file
Index: unittest/outputs/unittest_input_4.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittest/outputs/unittest_input_4.log b/unittest/outputs/unittest_input_4.log
new file mode 100644
--- /dev/null	(date 1651086274251)
+++ b/unittest/outputs/unittest_input_4.log	(date 1651086274251)
@@ -0,0 +1,1 @@
+actually_text_file.jpg;3
Index: unittest/outputs/unittest_input_5.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittest/outputs/unittest_input_5.log b/unittest/outputs/unittest_input_5.log
new file mode 100644
--- /dev/null	(date 1651086274254)
+++ b/unittest/outputs/unittest_input_5.log	(date 1651086274254)
@@ -0,0 +1,1 @@
+file_size_too_big.jpg;2
Index: unittest/outputs/unittest_input_2.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittest/outputs/unittest_input_2.log b/unittest/outputs/unittest_input_2.log
new file mode 100644
--- /dev/null	(date 1651086274152)
+++ b/unittest/outputs/unittest_input_2.log	(date 1651086274152)
@@ -0,0 +1,1 @@
+same2.jpg;6
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b999f1e4-50cb-4867-8881-7da063f883c1\" name=\"Default Changelist\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/Ex2.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/Ex2.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/ex2.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ex2.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"27hJmd6hDvLW3WN1mofVINo8ccg\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/Leon_/OneDrive - Johannes Kepler Universität Linz/JKU/Programming in Python II\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Leon_\\OneDrive - Johannes Kepler Universität Linz\\JKU\\Programming in Python II\\ML Project\\2_Data_Cleaning\\output_dir\" />\r\n      <recent name=\"C:\\Users\\Leon_\\OneDrive - Johannes Kepler Universität Linz\\JKU\\Programming in Python II\\ML Project\\2_Data_Cleaning\\log_dir\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.ex2\">\r\n    <configuration name=\"Ex2\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"Ex2\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Leon_\\OneDrive - Johannes Kepler Universität Linz\\JKU\\venv\\Scripts\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Ex2.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"Ex2\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Leon_\\OneDrive - Johannes Kepler Universität Linz\\JKU\\venv\\Scripts\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Ex2.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"ex2\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\">\r\n      <module name=\"Ex2\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/ex2.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Python.Ex2\" />\r\n      <item itemvalue=\"Python.ex2\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.ex2\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b999f1e4-50cb-4867-8881-7da063f883c1\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1649766545069</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1649766545069</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/ex2.py</url>\r\n          <line>28</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 94afad3c25e413844780548937351cbeb944648e)
+++ b/.idea/workspace.xml	(date 1651087022503)
@@ -1,9 +1,21 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
   <component name="ChangeListManager">
     <list default="true" id="b999f1e4-50cb-4867-8881-7da063f883c1" name="Default Changelist" comment="">
-      <change beforePath="$PROJECT_DIR$/.idea/Ex2.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/Ex2.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ex2_anna.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/unittest/outputs/unittest_input_0.log" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/unittest/outputs/unittest_input_1.log" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/unittest/outputs/unittest_input_2.log" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/unittest/outputs/unittest_input_3.log" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/unittest/outputs/unittest_input_4.log" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/unittest/outputs/unittest_input_5.log" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/unittest/outputs/unittest_input_6.log" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/unittest/outputs/unittest_input_7.log" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/unittest/outputs/unittest_input_8.log" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/unittest/outputs/unittest_input_9.log" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/ex2.py" beforeDir="false" afterPath="$PROJECT_DIR$/ex2.py" afterDir="false" />
     </list>
@@ -31,20 +43,20 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "last_opened_file_path": "C:/Users/Leon_/OneDrive - Johannes Kepler Universität Linz/JKU/Programming in Python II"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/Leon_/OneDrive - Johannes Kepler Universität Linz/JKU/Programming in Python II/ML Project/2_Data_Cleaning&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="C:\Users\Leon_\OneDrive - Johannes Kepler Universität Linz\JKU\Programming in Python II\ML Project\2_Data_Cleaning\output_dir" />
       <recent name="C:\Users\Leon_\OneDrive - Johannes Kepler Universität Linz\JKU\Programming in Python II\ML Project\2_Data_Cleaning\log_dir" />
     </key>
   </component>
-  <component name="RunManager" selected="Python.ex2">
+  <component name="RunManager" selected="Python.ex2_unittest">
     <configuration name="Ex2" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
       <module name="Ex2" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -108,12 +120,35 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
+    <configuration name="ex2_unittest" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="Ex2" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="C:\Users\Leon_\OneDrive - Johannes Kepler Universität Linz\JKU\venv\Scripts\python.exe" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/ex2_unittest.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
     <list>
       <item itemvalue="Python.Ex2" />
+      <item itemvalue="Python.ex2_unittest" />
       <item itemvalue="Python.ex2" />
     </list>
     <recent_temporary>
       <list>
+        <item itemvalue="Python.ex2_unittest" />
         <item itemvalue="Python.ex2" />
       </list>
     </recent_temporary>
@@ -143,15 +178,4 @@
       </map>
     </option>
   </component>
-  <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
-          <url>file://$PROJECT_DIR$/ex2.py</url>
-          <line>28</line>
-          <option name="timeStamp" value="1" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
-  </component>
 </project>
\ No newline at end of file
Index: unittest/outputs/unittest_input_6.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittest/outputs/unittest_input_6.log b/unittest/outputs/unittest_input_6.log
new file mode 100644
--- /dev/null	(date 1651086274321)
+++ b/unittest/outputs/unittest_input_6.log	(date 1651086274321)
@@ -0,0 +1,1 @@
+only_orange.jpg;5
Index: unittest/outputs/unittest_input_7.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittest/outputs/unittest_input_7.log b/unittest/outputs/unittest_input_7.log
new file mode 100644
--- /dev/null	(date 1651086274327)
+++ b/unittest/outputs/unittest_input_7.log	(date 1651086274327)
@@ -0,0 +1,3 @@
+h_and_w_too_small.jpg;4
+height_too_small.jpg;4
+width_too_small.jpg;4
Index: unittest/outputs/unittest_input_8.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittest/outputs/unittest_input_8.log b/unittest/outputs/unittest_input_8.log
new file mode 100644
--- /dev/null	(date 1651086274330)
+++ b/unittest/outputs/unittest_input_8.log	(date 1651086274330)
@@ -0,0 +1,1 @@
+grayscale.jpg;4
diff --git a/unittest/outputs/unittest_input_1.log b/unittest/outputs/unittest_input_1.log
new file mode 100644
diff --git a/unittest/outputs/unittest_input_0.log b/unittest/outputs/unittest_input_0.log
new file mode 100644
